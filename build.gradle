plugins {
    id "java"
    id "maven-publish"
}

ext {
    // Java-Version für alle Projekte
    javaVersion = JavaVersion.VERSION_17
    javaVersionInt = 17

    // Zentrale Abhängigkeitsversionen
    libraryVersions = [
            junit            : "5.8.2",
            assertj          : "3.26.0",
            lombok           : "1.18.22",
            reflections      : "0.10.2",
            guava            : "31.1-jre",
            "tinylog"        : "2.6.1",
            "dom4j"          : "1.6.1",
            "slf4j"          : "2.0.3",
            "mockito"        : "5.2.0",
            "gson"           : "2.10.1",
            "jackson"        : "2.17.2",
            "jacksonDatabind": "2.17.2",
            "springBoot"     : "3.3.0"
    ]

    // Zentrale Gruppen- und Versionsdefinition
    projectGroup = "one.xis"
}

allprojects {
    group = rootProject.ext.projectGroup
    version = project.projectVersion

    repositories {
        mavenCentral()
    }
}

subprojects {
    apply plugin: "java"

    tasks.withType(JavaCompile) {
        sourceCompatibility = rootProject.ext.javaVersion.toString()
        targetCompatibility = rootProject.ext.javaVersion.toString()
    }

}
// In der root build.gradle Datei

// Prüfen, ob der Release-Task aufgerufen wurde. Dies geschieht früh in der Konfigurationsphase.
// Wir prüfen auf den Namen und den qualifizierten Pfad, um sicherzugehen.
if (gradle.startParameter.taskNames.any { it.endsWith('createReleaseZip') }) {
    println "Release mode activated by 'createReleaseZip' task."
    // Wenn ja, wird die 'profile'-Eigenschaft für alle Unterprojekte gesetzt.
    // Dies geschieht, bevor die Tasks der Unterprojekte konfiguriert werden.
    subprojects {
        ext.profile = 'release'
    }
}

task createReleaseZip(type: JavaExec) {
    group = 'distribution'
    description = 'Creates a zip file with all release artifacts for Maven Central.'

    // Korrekte Deklaration der Abhängigkeit von den Tasks der Subprojekte.
    // Die Closure wird zur Konfigurationszeit ausgeführt, um die Abhängigkeiten korrekt aufzulösen.
    dependsOn {
        subprojects.collect { it.tasks.withType(PublishToMavenLocal) }
    }

    // Erzwingt zusätzlich die Ausführungsreihenfolge.
    mustRunAfter {
        subprojects.collect { it.tasks.withType(PublishToMavenLocal) }
    }

    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'ReleaseZip'

    // Hier ist die Referenz auf die Eigenschaft aus gradle.properties
    args project.group, project.projectVersion
}


test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
    afterTest { desc, result ->
        logger.quiet "${desc.className} - ${desc.name}: ${result.resultType}"
    }
    maxParallelForks = 4
}
