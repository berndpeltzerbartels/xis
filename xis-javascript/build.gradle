import one.xis.gradle.JavascriptPlugin

plugins {
    id 'java'
    id 'maven-publish'
    // id 'signing'
}

group = rootProject.ext.projectGroup
version = rootProject.ext.projectVersion

repositories {
    mavenCentral()
}

tasks.withType(JavaCompile) {
    sourceCompatibility = rootProject.ext.javaVersion.toString()
    targetCompatibility = rootProject.ext.javaVersion.toString()
}

processTestResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

sourceSets {
    test {
        resources {
            srcDir 'src/test/resources'
        }
    }
}


java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(rootProject.ext.javaVersionInt)
    }
    withSourcesJar()
    withJavadocJar()
}

apply plugin: JavascriptPlugin

tasks.named('processResources', ProcessResources) {
    // Wir filtern die Standard-Ressourcen, anstatt neue Quellen hinzuzufügen.
    // Dies vermeidet Duplikate und Konfigurationskonflikte.
    if (project.hasProperty('profile') && project.profile == 'release') {
        // RELEASE BUILD
        // Schließe die Entwicklungs-HTML aus.
        exclude 'index.html'
        // Benenne die Produktions-HTML um.
        rename 'index.prod.html', 'index.html'
    } else {
        // DEVELOPMENT BUILD
        // Schließe die Produktions-HTML aus.
        exclude 'index.prod.html'
    }
}


// Bibliotheks- und Tooling-Setup
def lombokVersion = rootProject.ext.libraryVersions.lombok
def mockitoVersion = "5.2.0"
def junitVersion = "5.7.0"
def assertjVersion = "3.16.1"
def graalVersion = "23.0.1"

dependencies {
    annotationProcessor "org.projectlombok:lombok:$lombokVersion"
    implementation "org.projectlombok:lombok:$lombokVersion"
    implementation project(':xis-util')
    implementation project(':xis-context')

    implementation project(':xis-resources')
    testImplementation project(':xis-test')
    testImplementation project(':xis-util')

// https://mvnrepository.com/artifact/com.google.javascript/closure-compiler
// https://mvnrepository.com/artifact/com.google.javascript/closure-compiler
    implementation("com.google.javascript:closure-compiler:v20240317")


    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
    implementation "org.mockito:mockito-core:$mockitoVersion"
    testImplementation "org.assertj:assertj-core:$assertjVersion"
    testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"

    implementation "org.graalvm.js:js-scriptengine:$graalVersion"
    implementation "org.graalvm.truffle:truffle-api:$graalVersion"
    implementation "org.graalvm.js:js:$graalVersion"
    implementation "org.graalvm.tools:chromeinspector:$graalVersion"
}

test {
    useJUnitPlatform()
    afterTest { desc, result ->
        logger.quiet "${desc.className} - ${desc.name}: ${result.resultType}"
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifactId = project.name

            pom {
                name = 'XIS ' + project.name.capitalize()
                description = 'Module ' + project.name + ' of the XIS declarative web framework.'
                url = 'https://github.com/berndpeltzerbartels/xis'

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id = 'bernd'
                        name = 'Bernd Peltzer-Bartels'
                        email = 'bernd@xis.one'
                    }
                }

                scm {
                    connection = 'scm:git:https://github.com/berndpeltzerbartels/xis.git'
                    developerConnection = 'scm:git:git@github.com:berndpeltzerbartels/xis.git'
                    url = 'https://github.com/berndpeltzerbartels/xis'
                }
            }
        }
    }

    repositories {
        maven {
            name = "OSSRH"
            url = uri("https://s01.oss.sonatype.org/service/local/staging/deploy/maven2")
            credentials {
                username = project.findProperty("ossrhUsername") ?: ""
                password = project.findProperty("ossrhPassword") ?: ""
            }
        }
    }
}

/*
signing {
    sign publishing.publications.mavenJava
    useGpgCmd()
}
*/

tasks.withType(Javadoc) {
    options.addBooleanOption('Xdoclint:none', true)
    options.addStringOption('encoding', 'UTF-8')
}
