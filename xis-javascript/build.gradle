import one.xis.gradle.JavascriptPlugin

plugins {
    id 'java'
    id 'maven-publish'
    id 'signing'
    //id 'base' // falls noch kein Plugin definiert
}

group = rootProject.ext.projectGroup
version = rootProject.ext.projectVersion

repositories {
    mavenCentral()
}

tasks.withType(JavaCompile) {
    sourceCompatibility = rootProject.ext.javaVersion.toString()
    targetCompatibility = rootProject.ext.javaVersion.toString()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(rootProject.ext.javaVersionInt)
    }
    withSourcesJar()
    withJavadocJar()
}

apply plugin: JavascriptPlugin


def jsSrcDir = file("src/main/resources")
def buildDir = file("$buildDir/esbuild")

// W채hle das Haupt-JS je nach Modus
def entryJs = file("${jsSrcDir}/app.js")
def bundledJs = file("${buildDir}/bundle.min.js")
def indexTemplate = file("${jsSrcDir}/index.html")
def indexMaven = file("${buildDir}/index.html")

// Task: B체ndeln mit esbuild
task bundleJs(type: Exec) {
    inputs.files fileTree(dir: jsSrcDir, include: ["*.js"])
    outputs.file bundledJs

    doFirst {
        buildDir.mkdirs()
    }

    commandLine "npx", "esbuild",
            entryJs.absolutePath,
            "--bundle",
            "--minify",
            "--keep-names",
            "--target=es2017",
            "--outfile=${bundledJs.absolutePath}"
}

// Task: Generiere neue index.html f체r Maven Central
task generateMavenIndex {
    dependsOn bundleJs
    inputs.file indexTemplate
    outputs.file indexMaven

    doLast {
        def content = indexTemplate.text
        content = content
                .replaceAll(/<script.*?src=".*?\.js".*?><\/script>/, "")
                .replace("</head>", '    <script src="/bundle.min.js" ignore="true"></script>\n</head>')
        indexMaven.text = content
    }
}

// Task: Nur f체r das Packaging
jar {
    dependsOn generateMavenIndex

    from(buildDir) {
        include "bundle.min.js"
        include "index.html"
        into "static" // oder "public", je nach Erwartung
    }

    // Optional: Ressourcenverzeichnis weiterhin einbinden
    from(jsSrcDir) {
        include "*.js"
        include "index.html"
        into "raw" // optionaler Zielordner im JAR
    }
}

// Local variables for versions
var lombokVersion = rootProject.ext.libraryVersions.lombok
var mockitoVersion = "5.2.0"
var junitVersion = "5.7.0"
var assertjVersion = "3.16.1"
var graalVersion = "23.0.1"


dependencies {

    // Lombok dependencies
    annotationProcessor "org.projectlombok:lombok:$lombokVersion"
    implementation "org.projectlombok:lombok:$lombokVersion"

    // Local project dependencies
    implementation project(':xis-resources')
    testImplementation project(':xis-test')
    testImplementation project(':xis-util')

    // JUnit dependencies
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"

    // Mockito dependencies
    implementation "org.mockito:mockito-core:$mockitoVersion"

    // AssertJ dependencies
    testImplementation "org.assertj:assertj-core:$assertjVersion"
    testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"

    // GraalVM dependencies
    implementation "org.graalvm.js:js-scriptengine:$graalVersion"
    implementation "org.graalvm.truffle:truffle-api:$graalVersion"
    implementation "org.graalvm.js:js:$graalVersion"
    implementation "org.graalvm.tools:chromeinspector:$graalVersion"
}

test {
    useJUnitPlatform()
    afterTest { desc, result ->
        logger.quiet "${desc.className} - ${desc.name}: ${result.resultType}"
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifactId = project.name

            pom {
                name = 'XIS ' + project.name.capitalize()
                description = 'Module ' + project.name + ' of the XIS declarative web framework.'
                url = 'https://github.com/berndpeltzerbartels/xis'

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id = 'bernd'
                        name = 'Bernd Peltzer-Bartels'
                        email = 'bernd@xis.one'
                    }
                }

                scm {
                    connection = 'scm:git:https://github.com/berndpeltzerbartels/xis.git'
                    developerConnection = 'scm:git:git@github.com:berndpeltzerbartels/xis.git'
                    url = 'https://github.com/berndpeltzerbartels/xis'
                }
            }
        }
    }
    repositories {
        maven {
            name = "OSSRH"
            url = uri("https://s01.oss.sonatype.org/service/local/staging/deploy/maven2")
            credentials {
                username = project.findProperty("ossrhUsername") ?: ""
                password = project.findProperty("ossrhPassword") ?: ""
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
    useGpgCmd()
}


tasks.withType(Javadoc) {
    options.addBooleanOption('Xdoclint:none', true)
    options.addStringOption('encoding', 'UTF-8')
}
