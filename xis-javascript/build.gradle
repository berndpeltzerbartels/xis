import one.xis.gradle.JavascriptPlugin

plugins {
    id 'java'
    id 'maven-publish'
    id 'signing'
}

group = rootProject.ext.projectGroup
version = rootProject.ext.projectVersion

repositories {
    mavenCentral()
}

tasks.withType(JavaCompile) {
    sourceCompatibility = rootProject.ext.javaVersion.toString()
    targetCompatibility = rootProject.ext.javaVersion.toString()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(rootProject.ext.javaVersionInt)
    }
    withSourcesJar()
    withJavadocJar()
}

apply plugin: JavascriptPlugin

def jsSrcDir = file("src/main/resources")
def buildDirEs = file("$buildDir/esbuild")
def indexTemplate = file("${jsSrcDir}/index.html")
def indexMaven = file("${buildDirEs}/index.prod.html")
def bundledJs = file("${buildDirEs}/bundle.min.js")
def xisProdJs = file("${jsSrcDir}/xis-prod.js") // vom Plugin erzeugt

// JS-Minification: Erzeuge bundle.min.js aus xis-prod.js
task bundleJs(type: Exec) {
    inputs.file xisProdJs
    outputs.file bundledJs

    doFirst {
        buildDirEs.mkdirs()
    }

    commandLine "npx", "esbuild",
            xisProdJs.absolutePath,
            "--bundle",
            "--minify",
            "--keep-names",
            "--format=iife",
            "--target=es2017",
            "--outfile=${bundledJs.absolutePath}"
}

// Erzeuge eine index.prod.html mit Verweis auf bundle.min.js
task generateMavenIndex {
    dependsOn bundleJs
    inputs.file indexTemplate
    outputs.file indexMaven

    doLast {
        def content = indexTemplate.text
                .replaceAll(/<script.*?src=".*?\.js".*?><\/script>/, "")
                .replace("</head>", '    <script src="bundle.min.js" ignore="true"></script>\n</head>')
        indexMaven.text = content
    }
}

// JAR-Konfiguration
jar {
    dependsOn generateMavenIndex
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    // Originale index.html und alle *.js-Dateien (außer xis-prod.js) ins Root
    from(jsSrcDir) {
        include "index.html"
        include "*.js"
        exclude "xis-prod.js" // nur temporär zur Bundle-Erzeugung
        into ""
    }

    // index.prod.html ins Root
    from(buildDirEs) {
        include "index.prod.html"
        into ""
    }

    // bundle.min.js ins JAR (z. B. für Doku, externe Tools)
    from(buildDirEs) {
        include "bundle.min.js"
        into ""
    }
}

// Bibliotheks- und Tooling-Setup
def lombokVersion = rootProject.ext.libraryVersions.lombok
def mockitoVersion = "5.2.0"
def junitVersion = "5.7.0"
def assertjVersion = "3.16.1"
def graalVersion = "23.0.1"

dependencies {
    annotationProcessor "org.projectlombok:lombok:$lombokVersion"
    implementation "org.projectlombok:lombok:$lombokVersion"

    implementation project(':xis-resources')
    testImplementation project(':xis-test')
    testImplementation project(':xis-util')

    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
    implementation "org.mockito:mockito-core:$mockitoVersion"
    testImplementation "org.assertj:assertj-core:$assertjVersion"
    testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"

    implementation "org.graalvm.js:js-scriptengine:$graalVersion"
    implementation "org.graalvm.truffle:truffle-api:$graalVersion"
    implementation "org.graalvm.js:js:$graalVersion"
    implementation "org.graalvm.tools:chromeinspector:$graalVersion"
}

test {
    useJUnitPlatform()
    afterTest { desc, result ->
        logger.quiet "${desc.className} - ${desc.name}: ${result.resultType}"
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifactId = project.name

            pom {
                name = 'XIS ' + project.name.capitalize()
                description = 'Module ' + project.name + ' of the XIS declarative web framework.'
                url = 'https://github.com/berndpeltzerbartels/xis'

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id = 'bernd'
                        name = 'Bernd Peltzer-Bartels'
                        email = 'bernd@xis.one'
                    }
                }

                scm {
                    connection = 'scm:git:https://github.com/berndpeltzerbartels/xis.git'
                    developerConnection = 'scm:git:git@github.com:berndpeltzerbartels/xis.git'
                    url = 'https://github.com/berndpeltzerbartels/xis'
                }
            }
        }
    }

    repositories {
        maven {
            name = "OSSRH"
            url = uri("https://s01.oss.sonatype.org/service/local/staging/deploy/maven2")
            credentials {
                username = project.findProperty("ossrhUsername") ?: ""
                password = project.findProperty("ossrhPassword") ?: ""
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
    useGpgCmd()
}

tasks.withType(Javadoc) {
    options.addBooleanOption('Xdoclint:none', true)
    options.addStringOption('encoding', 'UTF-8')
}
